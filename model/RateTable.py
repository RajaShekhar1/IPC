from datetime import datetime
from dateutil.parser import parse
from dateutil.relativedelta import relativedelta

def get_age_from_birthday(birthday_str):
    
    birth_date = parse(birthday_str)
    
    years = 0
    loop_date = datetime.today()
    
    loop_date += relativedelta(years=-1)
    while loop_date >= birth_date:
        years += 1
        loop_date += relativedelta(years=-1)
    
    return years

# Recommended rates - Good, Better, Best
def get_recommended_rates(gender, age_band, marital_status, include_spouse, num_children):
    
    pass

def lookup_weekly_rates(age):
    """
    Returns a list of (weekly-rate, coverage_amount) tuples for a given age
    """

def lookup_weekly_coverages(age):
    """
    Returns a list of (coverage_amount, weekly_rate) tuples for a given age
    """


ages = """18-20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70"""
age_list = ages.split()

weekly_table_raw = {
    6: """$76,696 $76,696 $76,696 $76,696 $76,696 $76,696 $76,246 $74,928 $72,829 $69,892 $66,496 $63,107 $59,770 $56,399 $53,061 $49,808 $46,679 $43,697 $40,881 $38,179 $35,616 $33,121 $30,769 $28,634 $26,694 $24,928 $23,339 $21,904 $20,586 $19,345 $18,144 $16,949 $15,758 $14,599 $13,492 $12,476 $11,556 $10,735 $10,008 $9,353 $8,754 $8,207 $7,701 $7,224 $6,767 $6,318""",
    7: """$92,035 $92,035 $92,035 $92,035 $92,035 $92,035 $91,496 $89,914 $87,395 $83,871 $79,795 $75,728 $71,724 $67,679 $63,673 $59,770 $56,014 $52,437 $49,057 $45,815 $42,740 $39,745 $36,923 $34,361 $32,033 $29,914 $28,007 $26,285 $24,703 $23,214 $21,773 $20,339 $18,909 $17,518 $16,191 $14,971 $13,867 $12,882 $12,009 $11,223 $10,505 $9,848 $9,242 $8,669 $8,121 $7,582 $7,046 $6,512""",
    8: """$107,375 $107,375 $107,375 $107,375 $107,375 $107,375 $106,745 $104,899 $101,961 $97,849 $93,095 $88,350 $83,678 $78,959 $74,286 $69,732 $65,350 $61,176 $57,233 $53,451 $49,863 $46,369 $43,077 $40,088 $37,372 $34,899 $32,675 $30,666 $28,820 $27,083 $25,401 $23,729 $22,061 $20,438 $18,889 $17,466 $16,178 $15,029 $14,011 $13,094 $12,256 $11,490 $10,782 $10,114 $9,474 $8,846 $8,220 $7,598 $6,995 $6,417""",
    9: """$122,714 $122,714 $122,714 $122,714 $122,714 $122,714 $121,994 $119,885 $116,527 $111,828 $106,394 $100,971 $95,632 $90,239 $84,898 $79,693 $74,686 $69,916 $65,409 $61,087 $56,986 $52,994 $49,231 $45,815 $42,710 $39,885 $37,343 $35,046 $32,937 $30,952 $29,030 $27,119 $25,212 $23,358 $21,588 $19,962 $18,489 $17,176 $16,012 $14,964 $14,007 $13,131 $12,322 $11,559 $10,828 $10,109 $9,395 $8,683 $7,994 $7,334 $6,710""",
    10: """$138,053 $138,053 $138,053 $138,053 $138,053 $138,053 $137,243 $134,870 $131,092 $125,806 $119,693 $113,592 $107,586 $101,518 $95,510 $89,655 $84,022 $78,655 $73,585 $68,722 $64,110 $59,618 $55,385 $51,542 $48,049 $44,871 $42,011 $39,427 $37,055 $34,821 $32,659 $30,508 $28,364 $26,277 $24,286 $22,457 $20,800 $19,323 $18,014 $16,835 $15,758 $14,773 $13,863 $13,004 $12,181 $11,373 $10,569 $9,768 $8,993 $8,251 $7,548""",
    11: """0 0 0 0 0 0 0 $149,856 $145,658 $139,785 $132,992 $126,214 $119,540 $112,798 $106,122 $99,617 $93,357 $87,395 $81,761 $76,358 $71,233 $66,242 $61,538 $57,269 $53,388 $49,856 $46,679 $43,808 $41,172 $38,690 $36,288 $33,898 $31,515 $29,197 $26,985 $24,952 $23,111 $21,470 $20,015 $18,705 $17,508 $16,414 $15,403 $14,448 $13,535 $12,637 $11,743 $10,854 $9,992 $9,168 $8,387""",
    12: """0 0 0 0 0 0 0 0 0 0 $146,292 $138,835 $131,494 $124,078 $116,735 $109,579 $102,693 $96,134 $89,937 $83,994 $78,356 $72,866 $67,692 $62,996 $58,727 $54,842 $51,346 $48,189 $45,289 $42,560 $39,916 $37,288 $34,667 $32,117 $29,683 $27,447 $25,422 $23,617 $22,017 $20,576 $19,259 $18,056 $16,943 $15,893 $14,888 $13,900 $12,918 $11,939 $10,992 $10,085 $9,226""",
}
weekly_coverages = {}
for weekly_amount in weekly_table_raw:
    weekly_coverages[weekly_amount] = weekly_table_raw[weekly_amount].split()

weekly_table = {}
for weekly_amount, coverages in weekly_coverages.iteritems():
    for i, coverage in enumerate(coverages):
        age_band = age_list[i]
        # Put an entry in for each age
        if '-' in age_band:
            lower, upper = age_band.split('-')
            ages = range(int(lower), int(upper)+1)
        else:
            ages = [int(age_band)]
        
        for age in ages:
            weekly_table[(age, weekly_amount)] = coverage
    
# Now weekly_table maps tuples (age, weekly_amount) to a coverage (string)

def get_coverage_for_weekly_rate(age, weekly_rate):
    coverage = weekly_table.get((age, weekly_rate), '0') 
    if coverage == '0':
        return None
    else:
        return coverage

def get_coverages_by_weekly_rate(age):
    coverages = []
    for weekly_rate in weekly_coverages.keys():
        coverage = get_coverage_for_weekly_rate(age, weekly_rate)
        if coverage:
            coverages.append(dict(rate=weekly_rate, coverage=coverage))
    
    return coverages

coverage_ages = "18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70"
coverages = {100000: ['$7.52', '$7.52', '$7.52', '$7.52', '$7.52', '$7.52', '$7.52', '$7.52', '$7.56', '$7.67', '$7.87', '$8.15', '$8.52', '$8.92', '$9.37', '$9.87', '$10.42', '$11.04', '$11.71', '$12.44', '$13.23', '$14.10', '$15.04', '$16.10', '$17.25', '$18.46', '$19.73', '$21.06', '$22.42', '$23.83', '$25.29', '$26.85', '$28.56', '$30.50', '$32.73', '$35.25', '$38.06', '$41.08', '$44.27', '$47.58', '$50.96', '$54.46', '$58.12', '$61.92', '$65.92', '$70.21', '$74.88', '$80.13', '$86.15', '$93.13', '$101.08', '$110.08', '$120.23'], 50000: ['$4.26', '$4.26', '$4.26', '$4.26', '$4.26', '$4.26', '$4.26', '$4.26', '$4.28', '$4.34', '$4.43', '$4.58', '$4.76', '$4.96', '$5.18', '$5.43', '$5.71', '$6.02', '$6.36', '$6.72', '$7.12', '$7.55', '$8.02', '$8.55', '$9.13', '$9.73', '$10.37', '$11.03', '$11.71', '$12.41', '$13.14', '$13.92', '$14.78', '$15.75', '$16.87', '$18.13', '$19.53', '$21.04', '$22.63', '$24.29', '$25.98', '$27.73', '$29.56', '$31.46', '$33.46', '$35.61', '$37.94', '$40.57', '$43.58', '$47.07', '$51.04', '$55.54', '$60.62'], 25000: ['$2.63', '$2.63', '$2.63', '$2.63', '$2.63', '$2.63', '$2.63', '$2.63', '$2.64', '$2.67', '$2.72', '$2.79', '$2.88', '$2.98', '$3.09', '$3.22', '$3.36', '$3.51', '$3.68', '$3.86', '$4.06', '$4.27', '$4.51', '$4.77', '$5.06', '$5.37', '$5.68', '$6.01', '$6.36', '$6.71', '$7.07', '$7.46', '$7.89', '$8.38', '$8.93', '$9.56', '$10.26', '$11.02', '$11.82', '$12.64', '$13.49', '$14.37', '$15.28', '$16.23', '$17.23', '$18.30', '$19.47', '$20.78', '$22.29', '$24.03', '$26.02', '$28.27', '$30.81'], 10000: ['$1.65', '$1.65', '$1.65', '$1.65', '$1.65', '$1.65', '$1.65', '$1.65', '$1.66', '$1.67', '$1.69', '$1.72', '$1.75', '$1.79', '$1.84', '$1.89', '$1.94', '$2.00', '$2.07', '$2.14', '$2.22', '$2.31', '$2.40', '$2.51', '$2.63', '$2.75', '$2.87', '$3.01', '$3.14', '$3.28', '$3.43', '$3.58', '$3.76', '$3.95', '$4.17', '$4.43', '$4.71', '$5.01', '$5.33', '$5.66', '$6.00', '$6.35', '$6.71', '$7.09', '$7.49', '$7.92', '$8.39', '$8.91', '$9.52', '$10.21', '$11.01', '$11.91', '$12.92'], 125000: ['$9.15', '$9.15', '$9.15', '$9.15', '$9.15', '$9.15', '$9.15', '$9.15', '$9.20', '$9.34', '$9.58', '$9.94', '$10.40', '$10.90', '$11.46', '$12.08', '$12.78', '$13.55', '$14.39', '$15.30', '$16.29', '$17.37', '$18.55', '$19.87', '$21.31', '$22.83', '$24.41', '$26.07', '$27.78', '$29.53', '$31.36', '$33.31', '$35.45', '$37.88', '$40.66', '$43.81', '$47.32', '$51.10', '$55.09', '$59.22', '$63.45', '$67.83', '$72.39', '$77.15', '$82.15', '$87.51', '$93.36', '$99.92', '$107.44', '$116.17', '$126.10', '$137.35', '$150.04'], 150000: ['$10.78', '$10.78', '$10.78', '$10.78', '$10.78', '$10.78', '$10.78', '$10.78', '$10.84', '$11.01', '$11.30', '$11.73', '$12.28', '$12.88', '$13.55', '$14.30', '$15.13', '$16.06', '$17.07', '$18.16', '$19.35', '$20.64', '$22.06', '$23.64', '$25.38', '$27.19', '$29.10', '$31.09', '$33.13', '$35.24', '$37.43', '$39.77', '$42.34', '$45.25', '$48.60', '$52.38', '$56.59', '$61.12', '$65.90', '$70.87', '$75.94', '$81.19', '$86.67', '$92.38', '$98.38', '$104.82', '$111.83', '$119.70', '$128.73', '$139.20', '$151.12', '$164.62', '$179.85'], 75000: ['$5.89', '$5.89', '$5.89', '$5.89', '$5.89', '$5.89', '$5.89', '$5.89', '$5.92', '$6.00', '$6.15', '$6.37', '$6.64', '$6.94', '$7.27', '$7.65', '$8.07', '$8.53', '$9.03', '$9.58', '$10.17', '$10.82', '$11.53', '$12.32', '$13.19', '$14.10', '$15.05', '$16.04', '$17.07', '$18.12', '$19.22', '$20.38', '$21.67', '$23.13', '$24.80', '$26.69', '$28.79', '$31.06', '$33.45', '$35.93', '$38.47', '$41.10', '$43.84', '$46.69', '$49.69', '$52.91', '$56.41', '$60.35', '$64.87', '$70.10', '$76.06', '$82.81', '$90.42']}
coverage_table = {}
for coverage_amount in coverages.keys():
    for age, i in enumerate(coverage_ages):
        coverage_table[(age, coverage_amount)] = coverages[coverage_amount][i]

def get_weekly_rate_by_coverage(age, coverage_amount):
    return coverage_table.get((age, coverage_amount)) 
    
def get_weekly_rates_by_coverage(age):
    rates = []
    for coverage in coverage_table:
        rate = get_weekly_rate_by_coverage(age, coverage)
        if rate:
            rates.append(dict(coverage=coverage, rate=rate))
    return rates

def get_child_rates():
    return [
        {'rate':'$1.15', 'coverage':'$10,000'},
        {'rate': '$2.30', 'coverage': '$20,000'},
    ]
